数组
如何实现随机访问
线性表
一组连续的内存空间
非线性表
连续的内存空间和相同类型的数据
随机访问
根据下标随机访问的时间复杂度为O(1)
JVM标记清除垃圾回收算法
警惕数组访问越界
c语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的
容器能否完全替代数组
容器的优势：可以将很多数组操作的细节封装起来，支持动态扩容
如果预先知道需要存储的数据规模，最好在创建容器的时候事先指定容器大小，避免频繁的内存申请和数据搬移
容器无法存储基本数据类型，需要使用包装类，然而自动拆装箱有性能消耗
数组下标从0开始的原因a[k]_address = base_address + (k-1)*type_size
单链表、双向链表、循环链表、双向循环链表、静态链表
假设一个字符串通过单链表来存储，如何判断该字符串是否为回文字符串
快慢指针，快指针步长为2，到达链尾，慢指针步长为1，慢指针将到达中间位置，慢指针移动的同时将前半段字符串反转，随后快指针重置指向中间位置，分别向两边遍历比较判断是否为回文，同时前半段需要反转回去将字符串修改为原来的串
链表反转
有序链表合并
警惕指针丢失和内存泄漏
链表插入新的结点时，一定要注意操作的顺序
删除链表结点时，一定要记得手动释放内存空间
使用哨兵简化实现难度
小心处理临界问题，比如插入新结点时，链表为空，删除结点时，链表只有一个元素等等
使用哨兵来解决临界问题
常见的链表操作
单链表反转
链表中环的检测
两个有序链表合并
删除链表倒数第n个结点
求链表中间结点
栈
FILO先进后出
顺序栈
链式栈
空间复杂度的计算是指除了原本的数据存储空间外，算法运行时还需要额外的存储空间的大小
函数调用栈
栈在表达式求值中的应用
利用栈把中缀表达式转化为后缀表达式
栈在括号匹配中的应用
利用栈结构实现浏览器页面的前进和后退
栈结构在函数调用时的应用
顺序队列
链式队列
循环队列（浪费一个存储空间，用于区分队列满或者队列空）
阻塞队列，在队列的基础上增加阻塞操作，空队列取数据阻塞，满队列插入数据阻塞，可以使用组赛队列轻松实现生产者-消费者模型
并发队列，多个线程进行生产或者消费时，保证线程安全
锁粒度大并发度低
CAS原子操作
高性能队列Disruptor
Linux环形缓存
堆栈溢出（递归调用层次很深，一直递，没有归），可以通过递归调用深度来提前终止递归调用
递归调用还会出现重复计算的问题，可以通过散列表来解决
写递归代码的技巧：写出递推公式，找出终止条件
分析排序算法的时间复杂度时，要分别给出最好情况、最坏情况、平均情况下的时间复杂度。除此之外，还要说出最好、最坏时间复杂度对应的要排序的原始数据是什么样的。





